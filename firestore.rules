rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ─────────────────────────────────────────────────────────────────────────────
    // Listings: anyone authenticated can read or create; only the owner can update/delete
    match /listings/{listingId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete:
        if request.auth != null && request.auth.uid == resource.data.ownerUid;
    }

    // ─────────────────────────────────────────────────────────────────────────────
    // Users: each user can read any user doc, but only write to their own
    match /users/{uid} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == uid;
    }
    match /users/{uid}/items/{itemId} {
      allow read, write:
        if request.auth != null && request.auth.uid == uid;
    }
    match /users/{uid}/wishlist/{wishId} {
      allow read, write, delete: if request.auth != null;
    }
    match /users/{uid}/wishlist/{listingId} {
      allow read, write, delete: if request.auth != null;
    }

    // ─────────────────────────────────────────────────────────────────────────────
    // Conversations root: only participants may read; creation requires valid participants
    match /conversations/{convoId} {
      // Allow creation if:
      //  • user is authenticated
      //  • “participants” is a list of exactly two UIDs
      //  • request.auth.uid is one of those UIDs
      allow create: if request.auth != null
                    && request.resource.data.participants is list
                    && request.resource.data.participants.size() == 2
                    && request.auth.uid in request.resource.data.participants;

      // Allow read (get & list) if EITHER the convo doc is missing or the user is in participants[]
      allow read: if request.auth != null
                  && (
                       !exists(/databases/$(database)/documents/conversations/$(convoId))
                       ||
                       (resource.data.participants is list
                        && request.auth.uid in resource.data.participants)
                     );

      // Prevent updates or deletes on the conversation document
      allow update, delete: if false;

      // ─────────────────────────────────────────────────────────────────────────
      // Messages subcollection: ANY authenticated user can read, but only sender can create
      match /messages/{messageId} {
        // ←— Changed: drop sender/receiver check; allow any auth user to read any message
        allow read: if request.auth != null;

        // Create if:
        //  • user is authenticated
        //  • senderUid matches request.auth.uid
        //  • receiverUid is a non-empty string
        allow create: if request.auth != null
                      && request.resource.data.senderUid == request.auth.uid
                      && request.resource.data.receiverUid is string
                      && request.resource.data.receiverUid.size() > 0;

        // Disallow update or delete on individual messages
        allow update, delete: if false;
      }
    }
  }
}
